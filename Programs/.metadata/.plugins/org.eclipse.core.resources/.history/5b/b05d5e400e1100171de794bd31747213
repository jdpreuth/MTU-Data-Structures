package cs2321;

import java.util.Comparator;

import net.datastructures.Entry;
import net.datastructures.Position;
import net.datastructures.SortedMap;

public class BinarySearchTree<K, V> extends LinkedBinaryTree<Entry<K, V>> implements SortedMap<K, V> {

	private class Node<E> implements Position<E> {
		E element;
		Node<E> parent;
		Node<E> leftChild;
		Node<E> rightChild;
		boolean isSentinel;

		public Node(E element, Node<E> parent) {
			this.element = element;
			this.leftChild = new Node<E>();
			this.rightChild = new Node<E>();
			this.parent = parent;
			this.isSentinel = false;
		}

		/**
		 * Constructor for a sentinel node
		 */
		public Node() {
			this.element = null;
			this.leftChild = null;
			this.rightChild = null;
			this.parent = null;
			this.isSentinel = true;
		}

		@Override
		public E getElement() throws IllegalStateException {
			// TODO Auto-generated method stub
			return element;
		}

		public void setElement(E element) {
			this.element = element;
		}

		public Node<E> left() {
			return leftChild;
		}

		public void setLeft(Node<E> leftChild) {
			this.leftChild = leftChild;
		}

		public Node<E> right() {
			return rightChild;
		}

		public void setRight(Node<E> rightChild) {
			this.rightChild = rightChild;
		}

		public Node<E> parent() {
			return parent;
		}

		public void setParent(Node<E> parent) {
			this.parent = parent;
		}

		public boolean isSentinel() {
			return isSentinel;
		}

		public boolean hasRight() {
			if (rightChild.isSentinel) {
				return false;
			}
			return true;
		}

		public boolean hasleft() {
			if (leftChild.isSentinel) {
				return false;
			}
			return true;
		}
	}

	private class TreeEntry<K, V> implements Entry<K, V> {

		K key;
		V value;

		public TreeEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}

		public TreeEntry() {
			this.key = null;
			this.value = null;
		}

		@Override
		public K getKey() {
			// TODO Auto-generated method stub
			return key;
		}

		@Override
		public V getValue() {
			// TODO Auto-generated method stub
			return value;
		}

		public void setValue(V value) {
			this.value = value;
		}

	}

	LinkedBinaryTree<Entry<K, V>> tree = new LinkedBinaryTree<Entry<K, V>>();
	Comparator c;

	/*
	 * default constructor
	 */
	public BinarySearchTree() {
		// TODO Add necessary initialization
		c = new DefaultComparator();
		tree.addRoot(null);
	}

	/*
	 * @param comparator - on construction, set comparator
	 */
	public BinarySearchTree(Comparator<K> comparator) {
		// TODO Add necessary initialization
		c = comparator;
		tree.addRoot(null);
	}

	private Node<Entry<K, V>> castToNode(Position<Entry<K, V>> p) throws IllegalArgumentException {
		if (!(p instanceof Node)) {
			throw new IllegalArgumentException();
		}
		Node<Entry<K, V>> node = (Node<Entry<K, V>>) p;
		return node;
	}

	private Node<Entry<K, V>> treeSearch(Node<Entry<K, V>> p, K key) {
		Node<Entry<K, V>> node = (Node<Entry<K, V>>) p;
		if (!node.hasleft() && !node.hasRight()) {
			return node;
		}
		if (c.compare(node.getElement(), key) < 0) {
			return treeSearch(node.right(), key);
		}
		if (c.compare(node.getElement(), key) > 0) {
			treeSearch(node.left(), key);
		}
		return node;
	}

	private Node<Entry<K, V>> getRoot() {
		Node<Entry<K, V>> root = castToNode(tree.root());
		return root;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return tree.size();
	}

	@Override
	public V get(K key) {
		// TODO Auto-generated method stub
		Node<Entry<K, V>> node = treeSearch(getRoot(), key);
		return node.getElement().getValue();
	}

	@Override
	public V put(K key, V value) {
		// TODO Auto-generated method stub
		Node<Entry<K, V>> node = treeSearch(getRoot(), key);
		if (node.hasRight() || node.hasleft()) {
			node.getElement().setValue(value);
			return null;
		} else {
			node.setElement(new Entry<K, V>(key, value));
			tree.insertLeft(node, null);
			tree.insertRight(node, null);
			return node.getElement().getValue();
		}
	}

	@Override
	public V remove(K key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<K> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<V> values() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<Entry<K, V>> entrySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> firstEntry() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> lastEntry() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> ceilingEntry(K key) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> floorEntry(K key) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> lowerEntry(K key) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> higherEntry(K key) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<Entry<K, V>> subMap(K fromKey, K toKey) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

}
