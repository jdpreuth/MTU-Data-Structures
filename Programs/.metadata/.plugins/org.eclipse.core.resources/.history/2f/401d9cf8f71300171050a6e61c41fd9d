/**
 * 
 */
package cs2321;

import java.util.Iterator;

import net.datastructures.BinaryTree;
import net.datastructures.Position;

/**
 * @author CS2321 Instructor
 *
 */
public class LinkedBinaryTree<E> implements BinaryTree<E> {
	protected class Node<E> implements Position<E> {
		E element;
		Node<E> parent;
		Node<E> leftChild;
		Node<E> rightChild;
		boolean isSentinel;

		public Node(E element, Node<E> parent) {
			this.element = element;
			this.leftChild = new Node<E>();
			this.rightChild = new Node<E>();
			this.parent = parent;
			this.isSentinel = false;
		}

		/**
		 * Constructor for a sentinel node
		 */
		public Node() {
			this.element = null;
			this.leftChild = null;
			this.rightChild = null;
			this.parent = null;
			this.isSentinel = true;
		}

		@Override
		public E getElement() throws IllegalStateException {
			// TODO Auto-generated method stub
			return element;
		}

		public void setElement(E element) {
			this.element = element;
		}

		public Node<E> left() {
			return leftChild;
		}

		public void setLeft(Node<E> leftChild) {
			this.leftChild = leftChild;
		}

		public Node<E> right() {
			return rightChild;
		}

		public void setRight(Node<E> rightChild) {
			this.rightChild = rightChild;
		}

		public Node<E> parent() {
			return parent;
		}

		public void setParent(Node<E> parent) {
			this.parent = parent;
		}

		public boolean isSentinel() {
			return isSentinel;
		}

		public boolean hasRight() {
			if (rightChild.isSentinel) {
				return false;
			}
			return true;
		}

		public boolean hasleft() {
			if (leftChild.isSentinel) {
				return false;
			}
			return true;
		}

	}

	private Node<E> root = null;
	private int size = 0;

	private Node<E> castToNode(Position<E> p) throws IllegalArgumentException {
		if (!(p instanceof Node)) {
			throw new IllegalArgumentException();
		}
		Node<E> node = (Node<E>) p;
		return node;
	}

	@Override
	public Position<E> root() {
		// TODO Auto-generated method stub
		if (root == null) {
			return null;
		}
		return root;
	}

	/*
	 * If the current root is not null, throw IllegalArgumentException
	 */
	public Position<E> addRoot(E e) throws IllegalArgumentException {
		// TODO Auto-generated meth
		if (root != null) {
			throw new IllegalArgumentException();
		}
		root = new Node<E>(e, null);
		size = 1;
		return root;
	}

	@Override
	public Position<E> parent(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		if (node == root) {
			return null;
		}
		return node.parent();
	}

	@Override
	public Iterable<Position<E>> children(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		DoublyLinkedList<Position<E>> children = new DoublyLinkedList<Position<E>>();
		children.addLast(node.left());
		children.addLast(node.right());
		return children;
	}

	@Override
	public int numChildren(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		Node<E> left = node.left();
		Node<E> right = node.right();
		if (left.isSentinel()) {

		}
		if (left.isSentinel() && right.isSentinel()) {
			return 0;
		}
		if ((left.isSentinel() && !right.isSentinel()) || (!left.isSentinel() && right.isSentinel())) {
			return 1;
		}
		return 2;
	}

	@Override
	public boolean isInternal(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		if (numChildren(p) > 0) {
			return true;
		}
		return false;
	}

	@Override
	public boolean isExternal(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		if (numChildren(p) > 0) {
			return false;
		}
		return true;
	}

	@Override
	public boolean isRoot(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		if (node == root) {
			return true;
		}
		return false;
	}

	public int size() {
		// TODO Auto-generated method stub
		return size;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return size == 0;
	}

	@Override
	public Iterator<E> iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<Position<E>> positions() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Position<E> left(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		if (node.hasleft()) {
			return node.left();
		}
		return null;
	}

	@Override
	public Position<E> right(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		if (node.hasRight()) {
			return node.right();
		}
		return null;
	}

	@Override
	public Position<E> sibling(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		Node<E> parent = node.parent();
		if (parent.hasleft() && parent.hasRight()) {
			if (parent.left() == node) {
				return parent.right();
			}
			if (parent.right() == node) {
				return parent.left();
			}
		}
		return null;
	}

	/*
	 * insert as the left child of P to contain the element e, return the newly
	 * inserted node
	 */
	public Position<E> insertLeft(Position<E> p, E e) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		if (!node.hasleft()) {
			Node<E> newNode = new Node<E>(e, node);
			node.setLeft(newNode);
			size++;
			return newNode;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*
	 * insert as the right child of P to contain the element e, return the newly
	 * inserted node
	 */
	public Position<E> insertRight(Position<E> p, E e) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		if (!node.hasRight()) {
			Node<E> newNode = new Node<E>(e, node);
			node.setRight(newNode);
			size++;
			return newNode;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/* remove p if p has at most one child and return p's parent */
	public Position<E> remove(Position<E> p) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Node<E> node = castToNode(p);
		if (node.hasleft() && node.hasRight()) {
			throw new IllegalArgumentException();
		}

		Node<E> subTree = new Node<E>();
		if (node.hasleft()) {
			subTree = node.left();
		} else if (node.hasRight()) {
			subTree = node.right();
		}

		if (node == root) {
			root = subTree;
		} else {
			if (node.parent().left() == node) {
				node.parent().setLeft(subTree);
			} else {
				node.parent().setRight(subTree);
			}
		}

		if (subTree != null) {
			subTree.setParent(node.parent());
		}

		size--;

		return node;
	}

}
