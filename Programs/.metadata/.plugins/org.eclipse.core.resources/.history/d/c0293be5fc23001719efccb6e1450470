package cs2321;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import net.datastructures.Edge;
import net.datastructures.Entry;
import net.datastructures.Graph;
import net.datastructures.Vertex;

/* CS2321 Project: The Labyrinth
 * 
 * Do NOT change the setupLabyrinth function.
 *         
 * Implement the dfsPath, bfsPath, shortestPath, and totalPathDistance functions below.
 *
 */
public class Labyrinth {
	public static final int WALL = 1;
	public static final String PARSE_CHARACTER = ",";

	private Graph<RoomCoordinate, Walkway> mGraph;
	private int mWidth = -1;
	private int mHeight = -1;

	public Labyrinth(String aFileName) {
		mGraph = setupLabyrinth(aFileName);

		// TODO: Add other necessary code to constructor
	}

	/*
	 * Width of the labyrinth (# of squares, not pixels)
	 */
	public int getWidth() {
		return mWidth;
	}

	/*
	 * Height of the labyrinth (# of squares, not pixels)
	 */
	public int getHeight() {
		return mHeight;
	}

	/*
	 * Create the graph based on the maze specification in the input file !!!
	 * Don't Change this method !!!
	 */
	public Graph<RoomCoordinate, Walkway> setupLabyrinth(String aFileName) {
		Scanner lFile = null;
		try {
			lFile = new Scanner(new File(aFileName));
			lFile.useDelimiter(",\n");
		} catch (FileNotFoundException eException) {
			System.out.println(eException.getMessage());
			eException.printStackTrace();
			System.exit(-1);
		}

		// You need to copy your Adjacent Graph implementation to this project.
		// Otherwise the following line has compiler error because
		// AdjListGraph(...) does not exist.
		Graph<RoomCoordinate, Walkway> lGraph = new AdjListGraph<RoomCoordinate, Walkway>();

		try {
			int lXSize = 0;
			int lYSize = 0;
			if (lFile.hasNext()) {
				String[] lDimensions = lFile.nextLine().split(PARSE_CHARACTER);
				lXSize = Integer.parseInt(lDimensions[0]);
				lYSize = Integer.parseInt(lDimensions[1]);
			}

			mWidth = lXSize;
			mHeight = lYSize;

			/* Create all the room coordinates */
			Vertex<?>[][] lVertices = new Vertex<?>[lXSize][lYSize];
			for (int lYIndex = 0; lYIndex < lYSize; lYIndex++) {
				for (int lXIndex = 0; lXIndex < lXSize; lXIndex++) {
					RoomCoordinate lNextRoomCoordinate = new RoomCoordinate(lXIndex, lYIndex);
					Vertex<RoomCoordinate> lNextRoom = lGraph.insertVertex(lNextRoomCoordinate);
					lVertices[lXIndex][lYIndex] = lNextRoom;
				}
			}

			for (int lYIndex = 0; lYIndex < lYSize; lYIndex++) {
				String[] lWalls = lFile.nextLine().split(PARSE_CHARACTER);
				for (int lXIndex = 0; lXIndex < lXSize; lXIndex++) {
					if (Integer.parseInt(lWalls[lXIndex]) != WALL) {
						Vertex<RoomCoordinate> lVertex1 = (Vertex<RoomCoordinate>) lVertices[lXIndex][lYIndex];
						Vertex<RoomCoordinate> lVertex2 = (Vertex<RoomCoordinate>) lVertices[lXIndex][lYIndex - 1];

						Walkway lNewWalkway = new Walkway(
								lVertex1.getElement().toString() + lVertex2.getElement().toString(),
								Integer.parseInt(lWalls[lXIndex]));
						lGraph.insertEdge(lVertex1, lVertex2, lNewWalkway);
					}
				}
			}

			for (int lYIndex = 0; lYIndex < lYSize; lYIndex++) {
				String[] lWalls = lFile.nextLine().split(PARSE_CHARACTER);
				for (int lXIndex = 0; lXIndex < lXSize; lXIndex++) {
					if (Integer.parseInt(lWalls[lXIndex]) != WALL) {
						Vertex<RoomCoordinate> lVertex1 = (Vertex<RoomCoordinate>) lVertices[lXIndex][lYIndex];
						Vertex<RoomCoordinate> lVertex2 = (Vertex<RoomCoordinate>) lVertices[lXIndex - 1][lYIndex];

						Walkway lNewWalkway = new Walkway(
								lVertex1.getElement().toString() + lVertex2.getElement().toString(),
								Integer.parseInt(lWalls[lXIndex]));
						lGraph.insertEdge(lVertex1, lVertex2, lNewWalkway);
					}
				}
			}
		} catch (Exception eException) {
			System.out.println(eException.getMessage());
			eException.printStackTrace();
			System.exit(-1);
		}

		return lGraph;
	}

	/*
	 * Returns an array of size 4 in order of N,E,S,W. If there is no vertex in
	 * a given direction, the array at that position equals null
	 */
	private Edge<Walkway>[] orderOutgoing(Vertex<RoomCoordinate> vertex) {
		Iterable<Edge<Walkway>> outgoing = mGraph.outgoingEdges(vertex);
		Edge<Walkway>[] ordered = (Edge<Walkway>[]) new Edge[4];
		int x = vertex.getElement().getX();
		int y = vertex.getElement().getY();
		for (Edge<Walkway> e : outgoing) {
			Vertex<RoomCoordinate> opp = mGraph.opposite(vertex, e);
			int oppX = opp.getElement().getX();
			int oppY = opp.getElement().getY();
			if (oppX == x && oppY == y - 1) { // North
				ordered[0] = e;
			} else if (oppX == x + 1 && oppY == y) { // East
				ordered[1] = e;
			} else if (oppX == x && oppY == y + 1) { // South
				ordered[2] = e;
			} else if (oppX == x - 1 && oppY == y) { // West
				ordered[3] = e;
			}
		}
		return ordered;
	}

	/*
	 * Puts all vertices reachable from a given vertex using a Depth-First
	 * Search technique
	 */
	private void DFS(Vertex<RoomCoordinate> vertex, HashMap<Vertex<RoomCoordinate>, Boolean> visited,
			HashMap<Vertex<RoomCoordinate>, Edge<Walkway>> forest) {
		visited.put(vertex, true);
		for (Edge e : orderOutgoing(vertex)) {
			if (e != null) {
				Vertex<RoomCoordinate> w = mGraph.opposite(vertex, e);
				if (visited.get(w) == null) {
					forest.put(w, e);
					DFS(w, visited, forest);
				}
			}
		}
	}

	/**
	 * Complete the dfsPath function by implementing a Depth First Search
	 * algorithm to find a path from start to end. At each vertex, the adjacent
	 * edges shall be searched in the order of NORTH, EAST, SOURTH and WEST.
	 * 
	 * @param start
	 *            an RoomCoordinate object represents the start location, this
	 *            object does not exist in the graph
	 * @param end
	 *            an RoomCoordinate object represents the start location, this
	 *            object does not exist in the graph
	 * @return Return the sequence of edges traversed in order to get from the
	 *         start to the finish locations. If there is NO path, do NOT return
	 *         null. Return an empty sequence.
	 */
	public Iterable<Edge<Walkway>> dfsPath(RoomCoordinate start, RoomCoordinate end) {
		// #TODO: Complete and correct dfsPath()
		/* #TODO: TCJ */

		// Map of all visited nodes
		HashMap<Vertex<RoomCoordinate>, Boolean> visited = new HashMap<Vertex<RoomCoordinate>, Boolean>();
		// Map of vertexes and discovery edges
		HashMap<Vertex<RoomCoordinate>, Edge<Walkway>> forest = new HashMap<Vertex<RoomCoordinate>, Edge<Walkway>>();

		// Finds the vertices associated with the start and end coordinates
		Vertex<RoomCoordinate> first = null;
		Vertex<RoomCoordinate> last = null;
		for (Vertex<RoomCoordinate> v : mGraph.vertices()) {
			if (start.compareTo(v.getElement()) == 0) {
				first = v;
			}

			if (end.compareTo(v.getElement()) == 0) {
				last = v;
			}
		}

		// DFS the graph
		DFS(first, visited, forest);

		// Construct the path
		DoublyLinkedList<Edge<Walkway>> path = new DoublyLinkedList<Edge<Walkway>>();
		Vertex<RoomCoordinate> cursor = last;
		while (cursor != first) {
			Edge<Walkway> e = forest.get(cursor);
			path.addFirst(e);
			cursor = mGraph.opposite(cursor, e);
		}

		return path;
	}

	/**
	 * Complete the dfsPath function by implementing a Breadth First Search
	 * algorithm to find a path from start to end. At each vertex, the adjacent
	 * edges shall be searched in the order of NORTH, EAST, SOURTH and WEST.
	 * 
	 * @param start
	 *            an RoomCoordinate object represents the start location, this
	 *            object does not exist in the graph
	 * @param end
	 *            an RoomCoordinate object represents the start location, this
	 *            object does not exist in the graph
	 * @return Return the sequence of edges traversed in order to get from the
	 *         start to the finish locations. If there is NO path, do NOT return
	 *         null. Return an empty sequence.
	 */
	public Iterable<Edge<Walkway>> bfsPath(RoomCoordinate start, RoomCoordinate end) {
		// #TODO: Complete and correct bfsPath()
		/* #TODO: TCJ */

		// Vertices to be searches
		CircularArrayQueue<Vertex<RoomCoordinate>> queue = new CircularArrayQueue<Vertex<RoomCoordinate>>(
				mGraph.numVertices());
		// Map of all visited nodes
		HashMap<Vertex<RoomCoordinate>, Boolean> visited = new HashMap<Vertex<RoomCoordinate>, Boolean>();
		// Map of vertexes and discovery edges
		HashMap<Vertex<RoomCoordinate>, Edge<Walkway>> forest = new HashMap<Vertex<RoomCoordinate>, Edge<Walkway>>();

		// Finds the vertices associated with the start and end coordinates
		Vertex<RoomCoordinate> first = null;
		Vertex<RoomCoordinate> last = null;
		for (Vertex<RoomCoordinate> v : mGraph.vertices()) {
			if (start.compareTo(v.getElement()) == 0) {
				first = v;
			}

			if (end.compareTo(v.getElement()) == 0) {
				last = v;
			}
		}

		// BFS the Graph
		Vertex<RoomCoordinate> cursor = first;
		visited.put(first, true);
		queue.enqueue(cursor);
		while (queue.size() != 0) {
			Vertex<RoomCoordinate> u = queue.dequeue();
			for (Edge<Walkway> e : orderOutgoing(u)) {
				if (e != null) {
					Vertex<RoomCoordinate> w = mGraph.opposite(u, e);
					if (visited.get(w) == null) {
						visited.put(w, true);
						forest.put(w, e);
						queue.enqueue(w);
					}
				}
			}
		}

		// Construct the path
		DoublyLinkedList<Edge<Walkway>> path = new DoublyLinkedList<Edge<Walkway>>();
		cursor = last;
		while (cursor != first) {
			Edge<Walkway> e = forest.get(cursor);
			path.addFirst(e);
			cursor = mGraph.opposite(cursor, e);
		}

		return path;
	}

	/**
	 * Complete the dfsPath function by implementing Dijkstra's algorithm to
	 * find a path from start to end. At each vertex, the adjacent edges shall
	 * be searched in the order of NORTH, EAST, SOURTH and WEST.
	 * 
	 * @param start
	 *            an RoomCoordinate object represents the start location, this
	 *            object does not exist in the graph
	 * @param end
	 *            an RoomCoordinate object represents the start location, this
	 *            object does not exist in the graph
	 * @return Return the sequence of edges traversed in order to get from the
	 *         start to the finish locations. If there is NO path, do NOT return
	 *         null. Return an empty sequence.
	 */
	public Iterable<Edge<Walkway>> shortestPath(RoomCoordinate start, RoomCoordinate end) {
		// #TODO: Complete and correct shortestPath()
		/* #TODO: TCJ */

		//
		HeapPQ<Integer, Vertex<RoomCoordinate>> pq = new HeapPQ<Integer, Vertex<RoomCoordinate>>();
		//
		HashMap<Vertex<RoomCoordinate>, Integer> d = new HashMap<Vertex<RoomCoordinate>, Integer>();
		//
		HashMap<Vertex<RoomCoordinate>, Integer> cloud = new HashMap<Vertex<RoomCoordinate>, Integer>();
		// Map of vertexes and discovery edges
		HashMap<Vertex<RoomCoordinate>, Edge<Walkway>> forest = new HashMap<Vertex<RoomCoordinate>, Edge<Walkway>>();
		//
		HashMap<Vertex<RoomCoordinate>, Entry<Integer, Vertex<RoomCoordinate>>> pqEntry = new HashMap<Vertex<RoomCoordinate>, Entry<Integer, Vertex<RoomCoordinate>>>();

		// Finds the vertices associated with the start and end coordinates
		Vertex<RoomCoordinate> first = null;
		Vertex<RoomCoordinate> last = null;
		for (Vertex<RoomCoordinate> v : mGraph.vertices()) {
			if (start.compareTo(v.getElement()) == 0) {
				first = v;
			}

			if (end.compareTo(v.getElement()) == 0) {
				last = v;
			}
		}

		// Dijkstra's Algorithm
		Integer distance;
		for (Vertex<RoomCoordinate> v : mGraph.vertices()) {
			if (v == first) {
				distance = 0;
			} else {
				distance = Integer.MAX_VALUE;
			}
			Entry<Integer, Vertex<RoomCoordinate>> e = pq.insert(distance, v);
			pqEntry.put(v, e);
			d.put(v, distance);
		}
		while (pq.size() > 0) {
			Entry<Integer, Vertex<RoomCoordinate>> e = pq.removeMin();
			distance = e.getKey();
			Vertex<RoomCoordinate>v = e.getValue();
			cloud.put(v, distance);
		}

		// Construct the Path
		DoublyLinkedList<Edge<Walkway>> path = new DoublyLinkedList<Edge<Walkway>>();
		Vertex<RoomCoordinate> cursor = last;
		cursor = last;
		while (cursor != first) {
			Edge<Walkway> e = forest.get(cursor);
			path.addFirst(e);
			cursor = mGraph.opposite(cursor, e);
		}

		return path;
	}

	/*
	 * Complete the totalPathDistance function, which calculates how far the
	 * given path traverses.
	 */
	public static double totalPathDistance(Iterable<Edge<Walkway>> path) {
		// # TODO: Complete totalPathDistance function
		return 0;
	}

	public static void main(String[] aArguments) {
		Labyrinth lLabyrinth = new Labyrinth("SmallLabyrinth.txt");

		// TODO: Testing
	}

}
