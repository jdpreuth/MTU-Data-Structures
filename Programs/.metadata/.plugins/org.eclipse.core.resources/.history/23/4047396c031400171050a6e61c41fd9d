package cs2321;

import java.util.Comparator;

import net.datastructures.Entry;
import net.datastructures.SortedMap;

public class BinarySearchTree<K, V> extends LinkedBinaryTree<Entry<K, V>> implements SortedMap<K, V> {

	private class TreeEntry implements Entry<K, V> {

		K key;
		V value;

		public TreeEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}

		public TreeEntry() {
			this.key = null;
			this.value = null;
		}

		@Override
		public K getKey() {
			// TODO Auto-generated method stub
			return key;
		}

		@Override
		public V getValue() {
			// TODO Auto-generated method stub
			return value;
		}

		public void setValue(V value) {
			this.value = value;
		}

	}

	LinkedBinaryTree<Entry<K, V>> tree = new LinkedBinaryTree<Entry<K, V>>();
	Comparator<K> c;
	private int size = 0;

	/*
	 * default constructor
	 */
	public BinarySearchTree() {
		// TODO Add necessary initialization
		c = new DefaultComparator<K>();
	}

	/*
	 * @param comparator - on construction, set comparator
	 */
	public BinarySearchTree(Comparator<K> comparator) {
		// TODO Add necessary initialization
		c = comparator;
	}

	private Node treeSearch(Node node, K key) {
		if (isExternal(node)) {
			return node;
		}
		if (c.compare(node.getElement().getKey(), key) < 0) {
			if (node.hasRight()) {
				return treeSearch(node.right(), key);
			}
			return node;
		}
		if (c.compare(node.getElement().getKey(), key) > 0) {
			if (node.hasleft()) {
				treeSearch(node.left(), key);
			}
			return node;
		}
		return node;
	}

	private Node getRoot() {
		return (Node) root();
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return tree.size();
	}

	@Override
	public V get(K key) {
		// TODO Auto-generated method stub
		Node node = treeSearch(getRoot(), key);
		if (isInternal(node)) {
			return null;
		}
		return node.getElement().getValue();
	}

	@Override
	public V put(K key, V value) {
		// TODO Auto-generated method stub
		if (getRoot() == null) {
			addRoot(new TreeEntry(key, value));
			size++;
			return null;
		}

		Node node = treeSearch(getRoot(), key);
		if (isInternal(node)) {
			System.out.println("Is Internal!");
			((TreeEntry) node.getElement()).setValue(value);
			return null;
		} else {
			if (c.compare(node.getElement().getKey(), key) < 0) {
				System.out.println("Inserted Right!");
				tree.insertRight(node, new TreeEntry(key, value));
				size++;
				return null;
			} else if (c.compare(node.getElement().getKey(), key) > 0) {
				System.out.println("Inserted Right!");

				tree.insertLeft(node, new TreeEntry(key, value));
				size++;
				return null;
			} else {
				((TreeEntry) node.getElement()).setValue(value);
				return node.getElement().getValue();
			}
		}
	}

	@Override
	public V remove(K key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<K> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<V> values() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<Entry<K, V>> entrySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> firstEntry() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> lastEntry() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> ceilingEntry(K key) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> floorEntry(K key) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> lowerEntry(K key) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Entry<K, V> higherEntry(K key) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<Entry<K, V>> subMap(K fromKey, K toKey) throws IllegalArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

}
